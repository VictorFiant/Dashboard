{"ast":null,"code":"var _jsxFileName = \"/Users/victorfiant/Desktop/react-test/client/src/Components/Dashboard/Dashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Box } from \"@material-ui/core\";\nimport { Chart, AreaSeries } from '@devexpress/dx-react-chart-material-ui';\nimport useStyle from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst columns = [{\n  id: 'cve',\n  label: 'CVE ID',\n  minWidth: 170\n}, {\n  id: 'date',\n  label: 'PUBLISHED DATE',\n  minWidth: 170\n}, {\n  id: 'severity',\n  label: 'SEVERITY',\n  minWidth: 170\n}, {\n  id: 'desc',\n  label: 'DESCRIPTION',\n  minWidth: 170\n}];\n\nconst Dashboard = () => {\n  _s();\n\n  const classes = useStyle();\n  const [data, setData] = useState([]); //const item = { cve: { CVE_data_meta: { ID: \"number\" }, description: { description_data: { value: \"string\" }}},  severity: \"string\" , publishedDate: \"number\"} \n\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(resData => setData(resData.data));\n  }, []);\n\n  const generateData = (start, end, step) => {\n    const dataa = [];\n\n    for (let i = start; i < end; i += step) {\n      data.push({\n        splineValue: Math.sin(i) / i,\n        lineValue: (i / 15) ** 2.718 - 0.2,\n        argument: i\n      });\n    }\n\n    return data2;\n  }; // console.log(data)\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.box,\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"sticky table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                style: {\n                  minWidth: column.minWidth\n                },\n                children: column.label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: data.map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.cve.CVE_data_meta.ID, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.publishedDate, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.impact.severity, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.cve.description.description_data.value, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.chart,\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        children: data.map(item => /*#__PURE__*/_jsxDEV(AreaSeries, {\n          children: item.publishedDate\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 27\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"rPVJhFeUhClZfe8vMVb1trexDec=\", false, function () {\n  return [useStyle];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/victorfiant/Desktop/react-test/client/src/Components/Dashboard/Dashboard.tsx"],"names":["React","useEffect","useState","Paper","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Box","Chart","AreaSeries","useStyle","columns","id","label","minWidth","Dashboard","classes","data","setData","fetch","then","response","json","resData","generateData","start","end","step","dataa","i","push","splineValue","Math","sin","lineValue","argument","data2","box","root","container","map","column","align","item","cve","CVE_data_meta","ID","publishedDate","impact","severity","description","description_data","value","chart"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,KAAhC,EAAuCC,SAAvC,EAAkDC,QAAlD,EAA4DC,SAA5D,EAAuEC,SAAvE,EAAkFC,GAAlF,QAA6F,mBAA7F;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,wCAAlC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAQC;AACD,MAAMC,OAAiB,GAAG,CACxB;AAAEC,EAAAA,EAAE,EAAE,KAAN;AAAaC,EAAAA,KAAK,EAAE,QAApB;AAA8BC,EAAAA,QAAQ,EAAE;AAAxC,CADwB,EAExB;AAAEF,EAAAA,EAAE,EAAE,MAAN;AAAcC,EAAAA,KAAK,EAAE,gBAArB;AAAuCC,EAAAA,QAAQ,EAAE;AAAjD,CAFwB,EAGxB;AAAEF,EAAAA,EAAE,EAAE,UAAN;AAAkBC,EAAAA,KAAK,EAAE,UAAzB;AAAqCC,EAAAA,QAAQ,EAAE;AAA/C,CAHwB,EAIxB;AAAEF,EAAAA,EAAE,EAAE,MAAN;AAAcC,EAAAA,KAAK,EAAE,aAArB;AAAoCC,EAAAA,QAAQ,EAAE;AAA9C,CAJwB,CAA1B;;AAOA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAGN,QAAQ,EAAxB;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAQ,EAAR,CAAhC,CAFsB,CAItB;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,OAAO,IAAIL,OAAO,CAACK,OAAO,CAACN,IAAT,CAF1B;AAID,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMO,YAAY,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,IAAb,KAAsB;AACzC,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAGJ,KAAb,EAAoBI,CAAC,GAAGH,GAAxB,EAA6BG,CAAC,IAAIF,IAAlC,EAAwC;AACtCV,MAAAA,IAAI,CAACa,IAAL,CAAU;AAAEC,QAAAA,WAAW,EAAEC,IAAI,CAACC,GAAL,CAASJ,CAAT,IAAcA,CAA7B;AAAgCK,QAAAA,SAAS,EAAG,CAACL,CAAC,GAAG,EAAL,KAAY,KAAb,GAAsB,GAAjE;AAAsEM,QAAAA,QAAQ,EAAEN;AAAhF,OAAV;AACD;;AAED,WAAOO,KAAP;AACD,GAPD,CAZsB,CAqBtB;;;AACA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAEpB,OAAO,CAACqB,GAAxB;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAErB,OAAO,CAACsB,IAA1B;AAAA,6BACE,QAAC,cAAD;AAAgB,QAAA,SAAS,EAAEtB,OAAO,CAACuB,SAAnC;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,YAAY,MAAnB;AAAoB,wBAAW,cAA/B;AAAA,kCACE,QAAC,SAAD;AAAA,mCACE,QAAC,QAAD;AAAA,wBACG5B,OAAO,CAAC6B,GAAR,CAAaC,MAAD,iBACX,QAAC,SAAD;AAA2B,gBAAA,KAAK,EAAEA,MAAM,CAACC,KAAzC;AAAgD,gBAAA,KAAK,EAAE;AAAE5B,kBAAAA,QAAQ,EAAE2B,MAAM,CAAC3B;AAAnB,iBAAvD;AAAA,0BACG2B,MAAM,CAAC5B;AADV,iBAAgB4B,MAAM,CAAC7B,EAAvB;AAAA;AAAA;AAAA;AAAA,sBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE,QAAC,SAAD;AAAA,sBACGK,IAAI,CAACuB,GAAL,CAASG,IAAI,iBACZ,QAAC,QAAD;AAAA,sCACE,QAAC,SAAD;AAAyB,gBAAA,KAAK,EAAEA,IAAI,CAACD,KAArC;AAA4C,gBAAA,KAAK,EAAE;AAAE5B,kBAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAAjB,iBAAnD;AAAA,gCAAkF6B,IAAI,CAACC,GAAL,CAASC,aAAT,CAAuBC,EAAzG;AAAA,iBAAgBH,IAAI,CAAC/B,EAArB;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,SAAD;AAAyB,gBAAA,KAAK,EAAE+B,IAAI,CAACD,KAArC;AAA4C,gBAAA,KAAK,EAAE;AAAE5B,kBAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAAjB,iBAAnD;AAAA,gCAAmF6B,IAAI,CAACI,aAAxF;AAAA,iBAAgBJ,IAAI,CAAC/B,EAArB;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,SAAD;AAAyB,gBAAA,KAAK,EAAE+B,IAAI,CAACD,KAArC;AAA4C,gBAAA,KAAK,EAAE;AAAE5B,kBAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAAjB,iBAAnD;AAAA,gCAAmF6B,IAAI,CAACK,MAAL,CAAYC,QAA/F;AAAA,iBAAgBN,IAAI,CAAC/B,EAArB;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,SAAD;AAAyB,gBAAA,KAAK,EAAE+B,IAAI,CAACD,KAArC;AAA4C,gBAAA,KAAK,EAAE;AAAE5B,kBAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAAjB,iBAAnD;AAAA,gCAAmF6B,IAAI,CAACC,GAAL,CAASM,WAAT,CAAqBC,gBAArB,CAAsCC,KAAzH;AAAA,iBAAgBT,IAAI,CAAC/B,EAArB;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eA0BE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEI,OAAO,CAACqC,KAA1B;AAAA,6BACA,QAAC,KAAD;AAAA,kBACGpC,IAAI,CAACuB,GAAL,CAASG,IAAI,iBAAI,QAAC,UAAD;AAAA,oBAA4BA,IAAI,CAACI;AAAjC,WAAiBJ,IAAI,CAAC/B,EAAtB;AAAA;AAAA;AAAA;AAAA,gBAAjB;AADH;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CA1DD;;GAAMG,S;UACYL,Q;;;KADZK,S;AA4DN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Box } from \"@material-ui/core\";\nimport { Chart, AreaSeries } from '@devexpress/dx-react-chart-material-ui';\nimport useStyle from \"./styles\";\n\ninterface Column {\n  id: 'cve' | 'date' | 'severity' | 'desc',\n  label: string,\n  minWidth?: number,\n  align?: 'left',\n\n};\nconst columns: Column[] = [\n  { id: 'cve', label: 'CVE ID', minWidth: 170 },\n  { id: 'date', label: 'PUBLISHED DATE', minWidth: 170 },\n  { id: 'severity', label: 'SEVERITY', minWidth: 170 },\n  { id: 'desc', label: 'DESCRIPTION', minWidth: 170 },\n]\n\nconst Dashboard = () => {\n  const classes = useStyle();\n  const [data, setData] = useState<any[]>([]);\n\n  //const item = { cve: { CVE_data_meta: { ID: \"number\" }, description: { description_data: { value: \"string\" }}},  severity: \"string\" , publishedDate: \"number\"} \n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then(response => response.json())\n      .then(resData => setData(resData.data))\n\n  }, []);\n  const generateData = (start, end, step) => {\n    const dataa = [];\n    for (let i = start; i < end; i += step) {\n      data.push({ splineValue: Math.sin(i) / i, lineValue: ((i / 15) ** 2.718) - 0.2, argument: i });\n    }\n  \n    return data2;\n  };\n\n  // console.log(data)\n  return (\n    <Box className={classes.box}>\n      <Paper className={classes.root}>\n        <TableContainer className={classes.container}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth }} >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map(item =>\n                <TableRow>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }}> {item.cve.CVE_data_meta.ID} </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.publishedDate} </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.impact.severity} </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.cve.description.description_data.value} </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n      <Paper className={classes.chart}>\n      <Chart >\n        {data.map(item => <AreaSeries key={item.id} >{item.publishedDate}</AreaSeries>)}\n      </Chart>   \n   \n      </Paper>\n    </Box>\n\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}