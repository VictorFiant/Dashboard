{"ast":null,"code":"var _jsxFileName = \"/Users/victorfiant/Desktop/react-test/client/src/Components/Dashboard/Dashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Box } from \"@material-ui/core\";\nimport { Line } from \"react-chartjs-2\";\nimport useStyle from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst columns = [{\n  id: 'cve',\n  label: 'CVE ID',\n  minWidth: 170\n}, {\n  id: 'date',\n  label: 'PUBLISHED DATE',\n  minWidth: 170\n}, {\n  id: 'severity',\n  label: 'SEVERITY',\n  minWidth: 170\n}, {\n  id: 'desc',\n  label: 'DESCRIPTION',\n  minWidth: 170\n}];\nconst dataLine = {\n  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dic'],\n  datasets: [{\n    label: 'Critical',\n    data: [0, 500],\n    borderColor: '#1de9b6',\n    backgroundColor: '#1de9b6'\n  }, {\n    label: 'Major',\n    data: [0, 500],\n    borderColor: '#2196f3',\n    backgroundColor: '#2196f3'\n  }, {\n    label: 'Minor',\n    data: [0, 500],\n    borderColor: '#ff5722',\n    backgroundColor: '#ff5722'\n  }]\n};\n\nconst Dashboard = () => {\n  _s();\n\n  const classes = useStyle();\n  const [data, setData] = useState([]);\n  const item = {\n    cve: {\n      CVE_data_meta: {\n        ID: \"number\"\n      },\n      description: {\n        description_data: {\n          value: \"string\"\n        }\n      }\n    },\n    severity: \"string\",\n    publishedDate: \"number\"\n  };\n  useEffect(() => {\n    fetch('http://localhost:5000/data').then(response => response.json()).then(resData => setData(resData.data));\n  }, []);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.box,\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"sticky table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                style: {\n                  minWidth: column.minWidth\n                },\n                children: column.label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: data.map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.cve.CVE_data_meta.ID, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.publishedDate, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", item.impact.baseMetricV2, \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: item.align,\n                style: {\n                  minWidth: item.minWidth\n                },\n                children: [\" \", \" \"]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.chart,\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: dataLine,\n        type: \"string\",\n        className: classes.chart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"rPVJhFeUhClZfe8vMVb1trexDec=\", false, function () {\n  return [useStyle];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/victorfiant/Desktop/react-test/client/src/Components/Dashboard/Dashboard.tsx"],"names":["React","useEffect","useState","Paper","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Box","Line","useStyle","columns","id","label","minWidth","dataLine","labels","datasets","data","borderColor","backgroundColor","Dashboard","classes","setData","item","cve","CVE_data_meta","ID","description","description_data","value","severity","publishedDate","fetch","then","response","json","resData","console","log","box","root","container","map","column","align","impact","baseMetricV2","chart"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Box } from \"@material-ui/core\";\nimport { Line } from \"react-chartjs-2\";\nimport useStyle from \"./styles\";\n\ninterface Column {\n  id: 'cve' | 'date' | 'severity' | 'desc',\n  label: string,\n  minWidth?: number,\n  align?: 'left',\n\n};\nconst columns: Column[] = [\n  { id: 'cve', label: 'CVE ID', minWidth: 170 },\n  { id: 'date', label: 'PUBLISHED DATE', minWidth: 170 },\n  { id: 'severity', label: 'SEVERITY', minWidth: 170 },\n  { id: 'desc', label: 'DESCRIPTION', minWidth: 170 },\n]\n\nconst dataLine = {\n  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dic'],\n  datasets: [{\n    label: 'Critical',\n    data: [0, 500],\n    borderColor: '#1de9b6',\n    backgroundColor: '#1de9b6'\n  },\n  {\n      label: 'Major',\n    data: [0, 500],\n    borderColor: '#2196f3',\n    backgroundColor: '#2196f3'\n  },\n  {\n      label: 'Minor',\n    data: [0, 500],\n    borderColor: '#ff5722',\n    backgroundColor: '#ff5722'\n  }],\n \n}\n\n\nconst Dashboard = () => {\n  const classes = useStyle();\n  const [data, setData] = useState<any[]>([]);\n\n  const item = { cve: { CVE_data_meta: { ID: \"number\" }, description: { description_data: { value: \"string\" }}},  severity: \"string\" , publishedDate: \"number\"} \n\n  useEffect(() => {\n    fetch('http://localhost:5000/data')\n      .then(response => response.json())\n      .then(resData => setData(resData.data))\n      \n  }, []);\n\n  \n  \n\n   console.log(data)\n  return (\n    <Box className={classes.box}>\n      <Paper className={classes.root}>\n        <TableContainer className={classes.container}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth }} >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map(item =>\n                <TableRow>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.cve.CVE_data_meta.ID} </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.publishedDate} </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {item.impact.baseMetricV2 } </TableCell>\n                  <TableCell key={item.id} align={item.align} style={{ minWidth: item.minWidth }} > {} </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n      <Paper className={classes.chart}>\n        \n        <Line data={dataLine} type='string'className={classes.chart} />\n        \n       </Paper>\n    </Box>\n\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}